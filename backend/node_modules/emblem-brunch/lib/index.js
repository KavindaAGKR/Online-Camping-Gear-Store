// Generated by CoffeeScript 1.4.0
(function() {
  var EmblemCompiler, fs, jsdom, sysPath;

  sysPath = require('path');

  fs = require('fs');

  jsdom = require('jsdom');

  module.exports = EmblemCompiler = (function() {

    EmblemCompiler.prototype.brunchPlugin = true;

    EmblemCompiler.prototype.type = 'template';

    EmblemCompiler.prototype.extension = 'emblem';

    EmblemCompiler.prototype.pattern = /\.(?:emblem)$/;

    EmblemCompiler.prototype.setup = function(config) {
      var paths;
      this.config = config;
      this.window = jsdom.jsdom().createWindow();
      paths = this.config.files.templates.paths;
      if (paths.jquery) {
        this.window.run(fs.readFileSync(paths.jquery, 'utf8'));
      }
      this.window.run(fs.readFileSync(paths.handlebars, 'utf8'));
      this.window.run(fs.readFileSync(paths.emblem, 'utf8'));
      if (paths.ember) {
        this.window.run(fs.readFileSync(paths.ember, 'utf8'));
        return this.ember = true;
      } else {
        return this.ember = false;
      }
    };

    function EmblemCompiler(config) {
      var _ref;
      this.config = config;
      if (((_ref = this.config.files.templates) != null ? _ref.paths : void 0) != null) {
        this.setup(this.config);
      }
      null;
    }

    EmblemCompiler.prototype.compile = function(data, path, callback) {
      var content, error, result;
      if (!(this.window != null)) {
        return callback("files.templates.paths must be set in your config", {});
      }
      try {
        if (this.ember) {
          path = path.replace(new RegExp('\\\\', 'g'), '/').replace(/^app\//, '').replace(/^templates\//, '').replace(/\.\w+$/, '');
          content = this.window.Emblem.precompile(this.window.Ember.Handlebars, data);
          return result = "Ember.TEMPLATES[" + (JSON.stringify(path)) + "] = Ember.Handlebars.template(" + content + ");module.exports = module.id;";
        } else {
          content = this.window.Emblem.precompile(this.window.Handlebars, data);
          return result = "module.exports = Handlebars.template(" + content + ");";
        }
      } catch (err) {
        return error = err;
      } finally {
        callback(error, result);
      }
    };

    return EmblemCompiler;

  })();

}).call(this);
